{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Wiki","text":"<p>   Code wikis and CS treats. </p> <p>Source: github.com/armand-sauzay/wiki</p> <p>Documentation: armand-sauzay.github.io/wiki</p>"},{"location":"#commands","title":"Commands","text":"<p>See commands for a list of commands.</p>"},{"location":"#workflows","title":"Workflows","text":"<p>See workflows for a list of workflows.</p>"},{"location":"#tools","title":"Tools","text":"<p>See tools for a list of tools.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>PRs and issues are welcome.</p>"},{"location":"commands/","title":"Useful commands","text":"<ul> <li>Bash</li> <li>Python</li> </ul>"},{"location":"commands/bash/","title":"Basics","text":""},{"location":"commands/bash/#what-is-bash","title":"What is Bash?","text":"<p>Bash is a command line interpreter. It is a program that takes commands from the keyboard and gives them to the operating system to perform. Bash is an acronym for Bourne Again SHell, a pun on Stephen Bourne, the author of the direct ancestor of the current Unix shell sh. The name is a reference to the fact that Bourne's shell was the direct ancestor of the Bourne Again SHell. The version of Bash included with OS X is actually a version of the GNU Project's Bourne Again SHell, or bash, which is a free software replacement for the Bourne shell. The GNU Project is a free software organization founded in 1983 to develop the GNU operating system and its GNU/Linux variants.</p>"},{"location":"commands/bash/#basic-commands","title":"Basic commands","text":"<ul> <li><code>pwd</code>: print working directory</li> <li><code>ls</code>: list files</li> <li><code>cd</code>: change directory</li> <li><code>mkdir</code>: make directory</li> <li><code>touch</code>: create a file</li> <li><code>cp</code>: copy a file or directory</li> <li><code>mv</code>: move a file or directory</li> <li><code>rm</code>: remove a file or directory</li> <li><code>man</code>: show manual for a command</li> <li><code>echo</code>: print some arguments</li> <li><code>cat</code>: print the whole content of a file</li> <li><code>grep</code>: search for a pattern in a file</li> <li><code>wc</code>: word count</li> <li><code>sort</code>: sort lines of text files</li> <li><code>uniq</code>: report or omit repeated lines</li> <li><code>head</code>: output the first part of files</li> <li><code>tail</code>: output the last part of files</li> <li><code>find</code>: search for files in a directory hierarchy</li> <li><code>xargs</code>: build and execute command lines from standard input</li> <li><code>sudo</code>: execute a command as the superuser or another user</li> <li><code>chmod</code>: change file mode bits</li> </ul> <p>Note: all the documentation for now is done for MacOS. Linux/Windows could be a little different (feel free to open a PR). But, in a terminal session, you can type <code>man &lt;command&gt;</code> to get the manual for the command.</p>"},{"location":"commands/bash/#table-of-content","title":"Table of Content","text":"<ul> <li>awk</li> <li>bang bang</li> <li>cat</li> <li>chmod</li> <li>curl</li> <li>pipe</li> <li>sed</li> <li>stdin/out/err</li> <li>xargs</li> </ul>"},{"location":"commands/bash/awk/","title":"awk","text":"<p>The awk command is used for text processing and data extraction in Linux/Unix systems. It reads the input line by line, applies the specified pattern or action, and then outputs the result.</p>"},{"location":"commands/bash/awk/#usage","title":"Usage:","text":"<pre><code>awk [options] 'pattern {action}' [file(s)]\n</code></pre> <ul> <li>options modify the behavior of the awk command.</li> <li>pattern is a regular expression that matches the input to be processed.</li> <li>action is the command or set of commands to be executed on the matched input.</li> </ul>"},{"location":"commands/bash/awk/#examples","title":"Examples:","text":"<ul> <li>Display only the first field of a file.</li> </ul> <pre><code>&gt; touch file.txt\n&gt; echo \"hello world\" &gt;&gt; file.txt\n&gt; echo \"hey world\" &gt;&gt; file.txt\n&gt; echo \"bonjour world\" &gt;&gt; file.txt\n&gt; awk '{print $1}' file.txt\nhello\nhey\nbonjour\n&gt; cat file.txt | awk '{print $2}'\nworld\nworld\nworld\n</code></pre> <ul> <li>Display only the lines that match a pattern (here, the pattern is \"bonjour\").</li> </ul> <pre><code>awk '/bonjour/' file.txt\n</code></pre> <ul> <li>Display only the first field of a file, and only the lines that match a pattern.</li> </ul> <pre><code>&gt; awk '/bonjour/ {print $1}' file.txt\nbonjour\n&gt; awk '/bonjour/ {print $2}' file.txt\nworld\n</code></pre> <ul> <li>Display the sum of the values in the second field of a file.</li> </ul> <pre><code>awk '{sum += $2} END {print sum}' file.txt\n</code></pre> <ul> <li>Display the maximum value in the third field of a file.</li> </ul> <pre><code>awk 'NR==1 {max=$3} $3&gt;max {max=$3} END {print max}' file.txt\n</code></pre> <ul> <li>Display the count of lines that match a pattern.   <pre><code>awk '/pattern/ {count++} END {print count}' file.txt\n</code></pre></li> </ul>"},{"location":"commands/bash/bang-bang/","title":"bang bang (!!)","text":"<p>The <code>!!</code> command is a shortcut for the last command. It is useful for repeating a command without having to type it again.</p>"},{"location":"commands/bash/bang-bang/#usage","title":"Usage","text":""},{"location":"commands/bash/bang-bang/#when-requiring-sudo","title":"When requiring sudo","text":"<p>When you have insufficient permissions to run a command, you can use <code>sudo</code> to run it as root. You can use <code>!!</code> to repeat the command with <code>sudo</code>:</p> <pre><code>&gt; apt install git\n[fail]\n&gt; sudo !!\n[this will run `sudo apt install git`]\n</code></pre>"},{"location":"commands/bash/bang-bang/#when-using-poetry","title":"When using poetry","text":"<p>When you are using poetry, you can use <code>!!</code> to repeat the last command with <code>poetry run</code>:</p> <pre><code>&gt; python -m main\n[fail]\n&gt; poetry run !!\n[this will run `poetry run python -m main`]\n</code></pre>"},{"location":"commands/bash/cat/","title":"cat","text":"<p>The cat command is used to concatenate and display the contents of one or more files in the terminal.</p>"},{"location":"commands/bash/cat/#usage","title":"Usage:","text":"<pre><code>cat [option(s)] [file(s)]\n</code></pre> <ul> <li>option(s) modify the behavior of the cat command.</li> <li>file(s) is the name of the file(s) to be displayed.</li> </ul>"},{"location":"commands/bash/cat/#examples","title":"Examples:","text":"<ul> <li>Display the contents of a single file.   <pre><code>cat file.txt\n</code></pre></li> <li>Concatenate and display the contents of multiple files.   <pre><code>cat file1.txt file2.txt\n</code></pre></li> <li>Display the line numbers for each line of a file.   <pre><code>cat -n file.txt\n</code></pre></li> <li>Display the contents of a file with non-printable characters displayed.   <pre><code>cat -v file.txt\n</code></pre></li> <li>Display the contents of a file in reverse order.   <pre><code>tac file.txt\n</code></pre></li> </ul>"},{"location":"commands/bash/chmod/","title":"chmod","text":"<p>The chmod command is used to change the permissions of a file or directory in Linux/Unix systems.</p>"},{"location":"commands/bash/chmod/#usage","title":"Usage:","text":"<pre><code>chmod [options] mode file/dir\n</code></pre> <ul> <li>options modify the behavior of the chmod command.</li> <li>mode is the permissions to be set for the file/directory.</li> <li>file/dir is the name of the file/directory to be changed.</li> </ul>"},{"location":"commands/bash/chmod/#examples","title":"Examples:","text":"<ul> <li>Change the permission of a file to read, write and execute for the user and   only read permission for the group and others.   <code>bash chmod 755 file.txt</code></li> <li>Change the permission of a directory and its contents recursively to read,   write and execute for the user and only read permission for the group and others.   <code>bash chmod -R 755 directory/</code></li> <li>Add execute permission for the group and others for a file.   <pre><code>chmod +x file.txt\n</code></pre></li> <li>Remove write permission for the user for a file.   <pre><code>chmod u-w file.txt\n</code></pre></li> <li>Set the permission of a file to be the same as another file.   <pre><code>chmod --reference=ref_file.txt file.txt\n</code></pre></li> </ul>"},{"location":"commands/bash/curl/","title":"curl","text":"<p>The curl command is used to transfer data to or from a server, using one of the supported protocols (HTTP, HTTPS, FTP, FTPS, SCP, SFTP, TFTP, DICT, TELNET, LDAP, or FILE). It is a versatile tool for accessing and manipulating data over the internet.</p>"},{"location":"commands/bash/curl/#usage","title":"Usage:","text":"<pre><code>curl [options] [URL]\n</code></pre> <ul> <li>options modify the behavior of the curl command.</li> <li>URL is the address of the resource to be accessed or modified.</li> </ul>"},{"location":"commands/bash/curl/#examples","title":"Examples:","text":"<ul> <li>Download a file from a URL.   <pre><code>curl -O https://example.com/file.txt\n</code></pre></li> <li>Download a file and save it with a different name.   <pre><code>curl -o output.txt https://example.com/file.txt\n</code></pre></li> <li>Display the HTTP headers of a response.   <pre><code>curl -I https://example.com\n</code></pre></li> <li>Send a POST request with data.   <pre><code>curl -d 'param1=value1&amp;param2=value2' -X POST https://example.com\n</code></pre></li> <li>Send a request with a specific user agent.   <pre><code>curl -A \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 Edge/16.16299\" https://example.com\n</code></pre></li> <li>Send a request with a specific referer.   <pre><code>curl -e \"https://google.com\" https://example.com\n</code></pre></li> <li>Follow redirects.   <pre><code>curl -L https://example.com\n</code></pre></li> <li>Use a proxy to connect to the server.   <pre><code>curl -x http://proxy.example.com:8080 https://example.com\n</code></pre></li> <li>Upload a file to a server.   <pre><code>curl -F \"file=@/path/to/local/file.txt\" https://example.com/upload\n</code></pre></li> <li>Download a file using FTP.   <pre><code>curl -O ftp://example.com/file.txt\n</code></pre></li> </ul>"},{"location":"commands/bash/pipe/","title":"pipe (|)","text":"<p>The pipe operator <code>|</code> is used to pipe the output of one command to another, meaning that the output of the first command is used as the input of the second command.</p>"},{"location":"commands/bash/pipe/#usage","title":"Usage","text":"<p>To use the pipe operator, simply put it between two commands. The output of the first command will be used as the input of the second command.</p> <pre><code>cmd1 | cmd2\n</code></pre> <p>Here the output of command 1 is used as the input of command 2. If you are not familiar with output (stdin/stdout/stderr), you can read more about it here.</p>"},{"location":"commands/bash/pipe/#example","title":"Example","text":"<pre><code>ls | grep \"foo\"\n</code></pre>"},{"location":"commands/bash/sed/","title":"sed","text":"<p>The sed command, short for stream editor, is a powerful tool used for text transformations in Linux/Unix systems. sed can perform various text manipulation tasks like find and replace, insertion or deletion of lines, etc.</p>"},{"location":"commands/bash/sed/#usage","title":"Usage","text":"<p>The basic syntax of sed is:</p> <pre><code>sed [options] 'command' filename\n</code></pre> <ul> <li> <p>The options are used to modify the behavior of sed.</p> </li> <li> <p>The command is the actual text transformation to be performed. filename is   the name of the file to perform the transformation on.</p> </li> </ul>"},{"location":"commands/bash/sed/#examples","title":"Examples","text":"<p>Here are some examples of sed commands:</p> <ul> <li>Replace a string in a file   <pre><code>sed 's/old_string/new_string/g' file.txt\n</code></pre></li> <li>Delete a line containing a specific pattern   <pre><code>sed '/pattern/d' file.txt\n</code></pre></li> <li>Print only specific lines of a file   <pre><code>sed -n '5,10p' file.txt\n</code></pre></li> <li>Insert a new line after a specific pattern   <pre><code>sed '/pattern/a new_line' file.txt\n</code></pre></li> <li>Replace a string in a specific line of a file   <pre><code>sed '2s/old_string/new_string/g' file.txt\n</code></pre></li> <li>Remove blank lines from a file   <pre><code>sed '/^$/d' file.txt\n</code></pre></li> <li>In-place editing of a file   <pre><code>sed -i 's/old_string/new_string/g' file.txt\n</code></pre></li> </ul> <p>For more information about sed and its options, you can check the sed manual by typing <code>man sed</code> in your terminal.</p>"},{"location":"commands/bash/std/","title":"stdin, stdout, stderr","text":"<p>The standard input, output, and error streams are three streams that are available to every process on a computer. They are used to communicate with the user and other programs.</p>"},{"location":"commands/bash/std/#usage","title":"Usage","text":"<ul> <li>stdin: The standard input stream is used to pass data to a program. It is   usually whatever is typed into the terminal, but it can also be redirected from   a file or another program. The standard input stream is represented by the file   descriptor 0.</li> <li>stdout: The standard output stream is used to output data from a program. It   is usually displayed in the terminal, but it can also be redirected to a file or   another program. The standard output stream is represented by the file   descriptor 1.</li> <li>stderr: The standard error stream is used to output error messages from a   program. It is usually displayed in the terminal, but it can also be redirected   to a file or another program. The standard error stream is represented by the   file descriptor 2.</li> </ul>"},{"location":"commands/bash/std/#example","title":"Example","text":"<ul> <li>Redirect stdout to a file   <pre><code>echo \"Hello\" &gt; file.txt\n</code></pre></li> <li>Redirect stderr to a file   <pre><code>echo \"Hello\" 2&gt; file.txt\n</code></pre></li> <li>Redirect stdout and stderr to a file   <pre><code>echo \"Hello\" &amp;&gt; file.txt\n</code></pre></li> <li>Redirect stdout and stderr to a file   <pre><code>echo \"Hello\" &gt; file.txt 2&gt;&amp;1\n</code></pre></li> <li>Redirect stdout to a file and stderr to stdout   <pre><code>echo \"Hello\" &gt; file.txt 2&gt;&amp;1\n</code></pre></li> </ul> <p>You might be wondering what is the difference between <code>&amp;&gt;</code> and <code>&gt; file.txt 2&gt;&amp;1</code>:</p> <ul> <li><code>&amp;&gt;</code> redirects both stdout and stderr to the same file.</li> <li><code>&gt; file.txt 2&gt;&amp;1</code> redirects stdout to file.txt and redirects stderr to stdout,   which is redirected to file.txt.</li> </ul>"},{"location":"commands/bash/xargs/","title":"xargs","text":"<p>The xargs command is used to pass the output of one command as an argument to another command. It is especially useful when you have a large number of files or arguments to pass to a command, and it is not possible to type them all out.</p> <p>Simply put, it folds arguments into inputs.</p>"},{"location":"commands/bash/xargs/#usage","title":"Usage","text":"<p>Let's say you have two commands, cmd1 and cmd2. And you want cmd2 to be executed for each argument that cmd1 outputs. You can do this by using xargs:</p> <pre><code>cmd1 | xargs cmd2\n</code></pre> <p>If you are not familiar with the pipe operator (|), you can read more about it here.</p>"},{"location":"commands/bash/xargs/#examples","title":"Examples","text":"<ul> <li>Verbose mode (-t): print the command that will be executed before executing it   <pre><code>&gt; touch file1 file2 file3\n&gt; ls | xargs -t echo helloworld\necho helloworld file1 file2 file3 #it tells the command that will be executed\nhelloworld file1 file2 file3 #it executes the command\n</code></pre></li> <li>Pass a certain number of arguments to the command at a time (-n)   <pre><code>&gt; ls | xargs -n 5 echo\nfile1 file2 file3\n</code></pre></li> <li>Replace arguments   <pre><code>&gt; ls | xargs -t -I {} echo Hello {} {}\necho Hello file1 file1\nHello file1 file1\necho Hello file2 file2\nHello file2 file2\necho Hello file3 file3\nHello file3 file3\n</code></pre>   For example to do a backup of all files in a directory:   <pre><code>ls | xargs -I {} cp {} {}.bak\n</code></pre></li> <li>Parallel execution (-P): number of precesses to run in parallel   <pre><code>&gt; ls | xargs -P 5 echo\nfile1 file2 file3\n</code></pre></li> </ul>"},{"location":"commands/python/","title":"Basics","text":""},{"location":"commands/python/#what-is-python","title":"What is python?","text":"<p>Python is a programming language. It is an interpreted language (although it is compiled into bytecode before execution - but the compiler does not much). The execution of the bytecode is performed by a virtual machine. Python is a high-level language, meaning that it is designed to be easy to read and write. It is also a general-purpose language, meaning that it can be used to write programs for a wide variety of purposes. The execution of Python programs can be divided in 4 main steps:</p> <ul> <li>Lexing: The source code is read and converted into tokens.</li> <li>Parsing: The tokens are converted into an Abstract Syntax Tree (AST).</li> <li>Compiling: The AST is converted into a code object (bytecode).</li> <li>Interpreting: The bytecode is executed by the Python virtual machine.   If you're interested, you can watch a video about the Python interpreter here:   https://www.youtube.com/watch?v=HVUTjQzESeo</li> </ul>"},{"location":"commands/python/#basic-workflow","title":"Basic workflow","text":"<p>To help with CI, check out actions-python.</p> <p>For the general workflow:</p> <ul> <li><code>brew install pyenv</code> - Install pyenv.</li> <li><code>echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' &gt;&gt; ~/.zshrc</code> - Add pyenv to the PATH (these commands are for zsh, if you use bash, use <code>~/.bashrc</code> instead).</li> <li><code>echo 'command -v pyenv &gt;/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' &gt;&gt; ~/.zshrc</code> - Add pyenv to the PATH (again).</li> <li><code>echo 'eval \"$(pyenv init -)\"' &gt;&gt; ~/.zshrc</code> - Add pyenv to the PATH (again).</li> <li><code>pyenv install 3.10.4</code> - Install Python 3.8.2.</li> <li><code>python -m venv venv</code> - Create a virtual environment.</li> <li><code>source venv/bin/activate</code> - Activate the virtual environment.</li> <li><code>touch requirements.txt</code> - Create a requirements file.</li> <li><code>echo \"package_name\" &gt;&gt; requirements.txt</code> - Add a package to the requirements file.</li> <li><code>python -m pip install -r requirements.txt</code> - Install the packages from the requirements file.</li> <li><code>touch file.py</code></li> <li><code>echo \"print('Hello World')\" &gt;&gt; file.py</code></li> <li><code>python -m file</code></li> </ul>"},{"location":"commands/python/#table-of-content","title":"Table of Content","text":"<ul> <li>dis</li> <li>gc</li> <li>inspect</li> <li>venv</li> </ul>"},{"location":"commands/python/dis/","title":"dis","text":"<p>dis is a Python built-in module that allows you to disassemble and inspect the bytecode of a Python function. The module provides a way to view the instructions that the interpreter actually executes under the hood, which can be useful for understanding how Python code is executed.</p>"},{"location":"commands/python/dis/#usage","title":"Usage","text":"<pre><code>dis.dis(x)\n</code></pre> <ul> <li>x is the object to disassemble.</li> </ul> <pre><code>dis.show_code(x)\n</code></pre> <ul> <li>x is the object to disassemble.</li> </ul>"},{"location":"commands/python/dis/#examples","title":"Examples","text":"<ul> <li>dis.dis() on a function.</li> </ul> <pre><code>&gt;&gt;&gt; import dis\n&gt;&gt;&gt; def f():\n...     print(\"Hello World\")\n...\n&gt;&gt;&gt; dis.dis(f)\n2           0 LOAD_GLOBAL              0 (print)\n2 LOAD_CONST               1 ('Hello World')\n4 CALL_FUNCTION            1\n6 POP_TOP\n8 LOAD_CONST               0 (None)\n10 RETURN_VALUE\n</code></pre> <ul> <li>The first column is the line number in the original source code.</li> <li>The second column is the index into the bytecode.</li> <li>The third column is the bytes map to a human readable instruction.</li> <li>The fourth column is the argument to the instruction.</li> <li> <p>The fifth column is an hint of what the instruction does.</p> </li> <li> <p>dis.show_code() on a function   <pre><code>&gt;&gt;&gt; import dis\n&gt;&gt;&gt; def f():\n...     print(\"Hello World\")\n...\n&gt;&gt;&gt; dis.show_code(f)\nName:              f\nFilename:          &lt;stdin&gt;\nArgument count:    0\nPositional-only arguments: 0\nKw-only arguments: 0\nNumber of locals:  0\nStack size:        2\nFlags:             OPTIMIZED, NEWLOCALS, NOFREE\nConstants:\n0: None\n1: 'Hello World'\nNames:\n0: print\n</code></pre></p> </li> </ul>"},{"location":"commands/python/gc/","title":"gc","text":"<p>gc is a built-in module that provides access to the garbage collector for reference cycles.</p>"},{"location":"commands/python/gc/#usage","title":"Usage","text":"<pre><code>gc.collect()\n</code></pre>"},{"location":"commands/python/gc/#examples","title":"Examples","text":"<ul> <li>Collect garbage.</li> </ul> <pre><code>&gt;&gt;&gt; import gc\n&gt;&gt;&gt; gc.collect()\n0\n</code></pre> <ul> <li>Get the number of objects tracked by the garbage collector.</li> </ul> <pre><code>&gt;&gt;&gt; import gc\n&gt;&gt;&gt; gc.get_count()\n(20, 0, 0)\n</code></pre> <ul> <li>Get the current threshold for automatic collection.   <pre><code>&gt;&gt;&gt; import gc\n&gt;&gt;&gt; gc.get_threshold()\n(700, 10, 10)\n</code></pre></li> </ul>"},{"location":"commands/python/inspect/","title":"Inspect","text":"<p>The <code>inspect</code> command allows you to inspect the contents of a Python package or module.</p>"},{"location":"commands/python/inspect/#usage","title":"Usage","text":"<pre><code>inspect &lt;package&gt;\n</code></pre>"},{"location":"commands/python/inspect/#examples","title":"Examples","text":"<ul> <li>Inspect the <code>pathlib</code> package:</li> </ul> <pre><code>&gt;&gt;&gt; import pathlib\n&gt;&gt;&gt; inspect.ismodule(pathlib)\nTrue\n</code></pre> <ul> <li>Inspect the <code>pathlib.Path</code> module:   <pre><code>&gt;&gt;&gt; import pathlib\n&gt;&gt;&gt; inspect.ismodule(pathlib.Path)\nFalse\n</code></pre></li> </ul>"},{"location":"commands/python/interactive/","title":"Python interactive mode","text":"<p>The <code>-i</code> flag allows you to run Python in interactive mode. This is useful for testing out Python code and seeing the results immediately.</p>"},{"location":"commands/python/interactive/#usage","title":"Usage","text":"<pre><code>python -i &lt;file&gt;\n</code></pre>"},{"location":"commands/python/interactive/#examples","title":"Examples","text":"<ul> <li>Run a Python file in interactive mode: let's say we have a file called <code>test.py</code> with the following contents:   <pre><code>hello = \"Hello, world!\"\nprint(hello)\n</code></pre>   We can run it in interactive mode with the following command:   <pre><code>&gt;&gt;&gt; python -i test.py\nHello, world!\n&gt;&gt;&gt; hello\n'Hello, world!'\n</code></pre></li> </ul>"},{"location":"commands/python/venv/","title":"venv","text":"<p>Venve is a tool to create virtual environments. It is part of the standard library since Python 3.3.</p>"},{"location":"commands/python/venv/#usage","title":"Usage","text":"<pre><code>venv &lt;path&gt;\n</code></pre> <ul> <li><code>path</code>: The path to the virtual environment.</li> </ul>"},{"location":"commands/python/venv/#examples","title":"Examples","text":"<ul> <li>Create a virtual environment in the <code>venv</code> folder:   <pre><code>&gt;&gt;&gt; python -m venv venv\n</code></pre></li> <li>Activate the virtual environment:   <pre><code>&gt;&gt;&gt; source venv/bin/activate\n</code></pre></li> <li>Deactivate the virtual environment:   <pre><code>&gt;&gt;&gt; deactivate\n</code></pre></li> </ul>"},{"location":"tools/","title":"Useful tools","text":""},{"location":"tools/#aws","title":"AWS","text":"<ul> <li>testing AWS policies - PolicySim   is a tool that allows you to test your IAM policies against your AWS resources.</li> <li>AWS IAM Policy Simulator -   Generate sample IAM policies for AWS services.</li> </ul>"},{"location":"tools/#ci","title":"CI","text":"<ul> <li>github actions - Automate, customize, and execute your   software development workflows right in your repository with GitHub Actions.</li> <li>pre-commit - A framework for managing and maintaining   multi-language pre-commit hooks.</li> </ul>"},{"location":"tools/#docker","title":"Docker","text":"<ul> <li>docker - Docker is a set of platform as a service   products that use OS-level virtualization to deliver software in packages   called containers.</li> <li>docker-compose - Compose is a tool for   defining and running multi-container Docker applications.</li> </ul>"},{"location":"tools/#gitgithub","title":"Git/Github","text":"<ul> <li>act: Run your GitHub Actions locally.</li> </ul>"},{"location":"tools/#infrastructure","title":"Infrastructure","text":"<ul> <li>terraform - Terraform is a tool for building,   changing, and versioning infrastructure safely and efficiently.</li> <li>localstack - LocalStack is a fully functional   local AWS cloud stack. It provides an easy-to-use test/mocking framework for   developing Cloud applications.</li> <li>awscli - The AWS Command Line Interface is a   unified tool to manage your AWS services.</li> </ul>"},{"location":"tools/#python","title":"Python","text":"<ul> <li>pyenv - Simple Python version management.</li> <li>poetry - Python dependency management and   packaging made easy.</li> <li>black - The uncompromising Python   code formatter.</li> <li>isort - A Python utility / library to sort   imports.</li> <li>flake8 - The tool for style guide   enforcement.</li> <li>mypy - Optional static typing for Python.</li> <li>pytest - The pytest framework makes it   easy to write small tests, yet scales to support complex functional testing   for applications and libraries.</li> <li>tox - for supporting multiple   environments and Python versions.</li> </ul>"},{"location":"tools/#shell","title":"Shell","text":"<ul> <li>bash - The GNU Project's Bourne-Again</li> <li>zsh - interactive shell.</li> <li>powerlevel10k - A Zsh theme.</li> <li>oh-my-zsh - Manage your zsh configuration.</li> </ul>"},{"location":"workflows/","title":"Useful Workflows","text":"<ul> <li>Interactive Rebase</li> </ul>"},{"location":"workflows/interactive-rebase/","title":"Interactive rebase","text":"<p>When you are working on a branch, you may want to reorganize your commits. Usually, the branch you are working on is not the <code>main</code> branch, but a feature branch. Following conventional commits, your branch should be associated with a feature, a bug fix, or a chore. So before merging your branch into the <code>main</code> branch, you usually want to squash your commits into one or a few commits, and keep only one type of commit (e.g. only <code>feat</code> commits).</p>"},{"location":"workflows/interactive-rebase/#tldr","title":"TLDR","text":"<p>The usual workflow looks like this:</p> <ol> <li>git checkout main</li> <li>git pull</li> <li>git checkout  <li>git rebase -i main</li> <li>Squash commits</li> <li>git push --force-with-lease</li> <p>For more details, see the sections below.</p>"},{"location":"workflows/interactive-rebase/#what-is-an-interactive-rebase","title":"What is an interactive rebase?","text":"<p>An interactive rebase is a way to reorganize your commits. It allows you to reorder your commits, squash commits, and edit commit messages.</p>"},{"location":"workflows/interactive-rebase/#usage","title":"Usage","text":"<p>Usually, when working on a PR, you will want to rebase your branch on top of the latest changes in the <code>main</code> branch, and then squash your commits to keep only a few commits.</p> <p>To rebase your branch on top of the latest changes in the <code>main</code> branch, run the following command:</p> <pre><code>&gt; git checkout main\n&gt; git pull\n&gt; git checkout &lt;your-branch&gt;\n&gt; git rebase -i main\n[-i is for interactive]\n</code></pre> <p>In the editor you can then squash the commits you want to squash, and reorder the commits you want to reorder.</p>"},{"location":"workflows/interactive-rebase/#squashing-commits","title":"Squashing commits","text":"<p>In the editor, you can squash commits by changing <code>pick</code> to <code>squash</code> or <code>s</code>:</p> <pre><code>pick 1a2b3c4 Add a new feature\nsquash 4d5e6f7 Fix a bug\nsquash 7g8h9i0 Fix another bug\n</code></pre>"},{"location":"workflows/interactive-rebase/#pushing-your-changes","title":"Pushing your changes","text":"<p>After you have rebased your branch, you will need to force push your changes to the remote branch:</p> <pre><code>&gt; git push --force-with-lease\n</code></pre> <p>The option <code>--force-with-lease</code> is safer than <code>--force</code> because it will fail if the remote branch has changed since you last pulled it.</p>"}]}